@page "/edit-client/{clientId}"


@using Facturatie.Shared
@using System
@using System.Linq
@using MudBlazor
@using static MudBlazor.CategoryTypes


@inject MudBlazor.ISnackbar snackBar
@inject IDialogService DialogService
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@inject ClientService clientService



<MudCard Elevation="25">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">Clients</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <EditForm OnValidSubmit="Update" OnInvalidSubmit='()=>snackBar.Add("Provide a name",Severity.Warning)' Model="@client">
            <MudTextField @bind-Value="@client.ClientName" Label="Name of the company of the client"> </MudTextField>
            <MudTextField @bind-Value="@client.FirstName" Label="First name of Client"> </MudTextField>
            <MudTextField @bind-Value="@client.LastName" Label="Last name of Client"> </MudTextField>
            <MudTextField @bind-Value="@client.VAT" Label="VAT of Client"> </MudTextField>
            <MudTextField @bind-Value="@client.StreetName" Label="Street name of Client"> </MudTextField>
            <MudTextField @bind-Value="@client.StreetNumber" Label="street number of Client"> </MudTextField>
            <MudTextField @bind-Value="@client.PostalCode" Label="postalcode of Client"> </MudTextField>
            <MudTextField @bind-Value="@client.City" Label="city of Client"> </MudTextField>
            <MudTextField @bind-Value="@client.Country" Label="country of Client"> </MudTextField>
            <br />
            <MudButton Color="Color.Info" Variant="Variant.Filled" OnClick="Update">Update Client</MudButton>
        </EditForm>
    </MudCardContent>
</MudCard>





@code {
    [Parameter] public string clientId { get; set; }
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }


    private Guid parsedClientId;
    private Invoice invoice = new Invoice();
    private Client client = new Client();
    private Product product = new Product();
    private List<Invoice> invoices = new List<Invoice>();
    private List<Client> clients = new List<Client>();
    private List<Product> products = new List<Product>();






    protected override async Task OnInitializedAsync()
    {
        invoices = invoiceService.GetAll();
        clients = clientService.GetAll();

        client = new Client(); // Initialize the client object

        if (clientService != null && Guid.TryParse(clientId, out parsedClientId))
        {
            client = clientService.GetById(parsedClientId);
        }
        else
        {
            // Handle the case where clientService is null or parsing fails
            Console.WriteLine($"clientService is null or failed to parse clientId: {clientId}");
        }
    }

    private List<Invoice> GetAll()
    {
        invoices = invoiceService.GetAll();
        return invoices;
    }


    private void Update()
    {
        clientService.Update(client);
        snackBar.Add("Client Updated.", Severity.Success);
        GetAll();
        NavigationManager.NavigateTo($"/Clients");


    }


}
