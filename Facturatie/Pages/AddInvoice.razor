@page "/add-invoice"


@using Facturatie.Shared
@using System
@using System.Linq
@using MudBlazor
@using static MudBlazor.CategoryTypes


@inject MudBlazor.ISnackbar snackBar
@inject IDialogService DialogService
@inject IJSRuntime JsRuntime


<MudCard Elevation="25">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">Add Invoice</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <EditForm OnValidSubmit="Add" OnInvalidSubmit='()=>snackBar.Add("Provide a name",Severity.Warning)' Model="@invoice">
            <MudGrid>

                <MudItem xs="12" sm="4" md="6">
                    <MudSelect T="Guid" Label="Select Client" @bind-Value="invoice.ClientId">
                        <MudSelectItem T="Guid" Value="@client.ClientId">Clients</MudSelectItem>
                        @foreach (var client in clients)
                        {
                            <MudSelectItem T="Guid" Value="@client.ClientId">@client.ClientName</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>


                @*
                <MudItem xs="12" sm="4" md="6">
                <MudTextField @bind-Value="invoice.Name" Label="Name" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
                </MudItem>
                *@


                <MudItem xs="12" sm="4" md="6">
                    <MudTextField @bind-Value="invoice.InvoiceNumber" Label="Invoice Number" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
                </MudItem>

                <MudItem xs="12" sm="4" md="6">
                    <MudDatePicker @bind-Value="invoice.StartDate" DateFormat="yyyy-MM-dd" Editable="true" Label="Start date" Variant="Variant.Text" Margin="Margin.Normal"></MudDatePicker>
                </MudItem>

                <MudItem xs="12" sm="4" md="6">
                    <MudDatePicker @bind-Value="invoice.EndDate" DateFormat="yyyy-MM-dd" Editable="true" Label="End date" Variant="Variant.Text" Margin="Margin.Normal"></MudDatePicker>
                </MudItem>



            </MudGrid>
        </EditForm>

        <br />
        <MudButton Variant="Variant.Filled" Color="Color.Info" OnClick="AddProduct">Add Product</MudButton>
        <MudText Typo="Typo.h6">Products in this invoice</MudText>
        <MudTable Items="@products" TItem="Product">
            <HeaderContent>
                <MudTh>Product Name</MudTh>
                <MudTh>Description</MudTh>
                <MudTh>Price</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="product Name">@context.Name</MudTd>
                <MudTd DataLabel="Description">@context.Description</MudTd>
                <MudTd DataLabel="Price">@context.Price</MudTd>
            </RowTemplate>
        </MudTable>

        <br />

        <MudButton Variant="Variant.Filled" Color="Color.Info" OnClick="Add">Add Invoice</MudButton>
    </MudCardContent>
</MudCard>

@code {
    private Invoice invoice = new Invoice();
    private Client client = new Client();
    private Product product = new Product();
    private List<Invoice> invoices = new List<Invoice>();
    private List<Client> clients = new List<Client>();
    private List<Product> products = new List<Product>();


    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    void Close() => MudDialog.Close(DialogResult.Ok(true));


    protected override async Task OnInitializedAsync()
    {
        clients = clientService.GetAll();
        invoices = invoiceService.GetAll();
        products = productService.GetAll();
    }

    private List<Invoice> GetAll()
    {
        invoices = invoiceService.GetAll();
        return invoices;
    }


    private void Add()
    {
        if (invoice.InvoiceId == Guid.Empty)
        {
            invoiceService.Add(invoice);
        }
        else
        {
            invoiceService.Update(invoice);
        }
        invoice = new Invoice();
        snackBar.Add("invoice Added.", Severity.Success);
        GetAll();
        Close();
    }


    // private void AddProduct()
    // {

    //         product.InvoiceID = invoice.InvoiceId; // Associate the product with the current invoice
    //         productService.Add(product);
    //         products = productService.GetProductsByInvoiceId(invoice.InvoiceId); // Update the list of products
    //         product = new Product();
    //         snackBar.Add("Product Added.", Severity.Success);

    // }


    private void AddProduct()
    {

        var options = new MudBlazor.DialogOptions
            {
                MaxWidth = MaxWidth.ExtraLarge
            };
        DialogService.Show<AddProductDialog>("Add product", options);
    }

}
