@page "/edit-invoice/{invoiceId}"


@using Facturatie.Shared
@using System
@using System.Linq
@using MudBlazor
@using static MudBlazor.CategoryTypes


@inject MudBlazor.ISnackbar snackBar
@inject IDialogService DialogService
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@inject InvoiceService invoiceService



<MudCard Elevation="25">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">Invoices</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <EditForm OnValidSubmit="Update" OnInvalidSubmit='()=>snackBar.Add("Provide a name",Severity.Warning)' Model="@invoice">
            <MudTextField @bind-Value="@invoice.InvoiceNumber" Label="Name of the number of the invoice"> </MudTextField>

            <MudItem xs="12" sm="4" md="6">
                <MudDatePicker @bind-Value="invoice.StartDate" Mask="@(new DateMask("dd/MM/yyyy"))" @bind-Date="startDate" Placeholder="Select Date" DateFormat="dd/MM/yyyy" Editable="true" Label="Start date" Variant="Variant.Text" Margin="Margin.Normal"></MudDatePicker>
            </MudItem>

            <MudItem xs="12" sm="4" md="6">
                <MudDatePicker @bind-Value="invoice.StartDate" Mask="@(new DateMask("dd/MM/yyyy"))" @bind-Date="endDate" Placeholder="Select Date" DateFormat="dd/MM/yyyy" Editable="true" Label="Start date" Variant="Variant.Text" Margin="Margin.Normal"></MudDatePicker>
            </MudItem>
            
            <br />

            <MudButton Color="Color.Info" Variant="Variant.Filled" OnClick="Update">Update invoice</MudButton>
        </EditForm>
    </MudCardContent>
</MudCard>





@code {
    [Parameter] public string invoiceId { get; set; }
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    private MudTable<Product> _table;
    private Guid parsedInvoicetId;
    private Invoice invoice = new Invoice();
    private Client client = new Client();
    private Product product = new Product();
    private DateTime? startDate;
    private DateTime? endDate;
    private List<Invoice> invoices = new List<Invoice>();
    private List<Client> clients = new List<Client>();
    private List<Product> products = new List<Product>();






    protected override async Task OnInitializedAsync()
    {
        invoices = invoiceService.GetAll();
        clients = clientService.GetAll();

        if (parsedInvoicetId != Guid.Empty)
        {
            invoice = invoiceService.GetById(parsedInvoicetId);
            invoice.StartDate = DateTime.Now;
        }


        if (invoiceService != null && Guid.TryParse(invoiceId, out parsedInvoicetId))
        {
            invoice = invoiceService.GetById(parsedInvoicetId);
        }
        else
        {
            // Handle the case where clientService is null or parsing fails
            Console.WriteLine($"clientService is null or failed to parse clientId: {invoiceId}");
        }
    }

    private List<Invoice> GetAll()
    {
        invoices = invoiceService.GetAll();
        return invoices;
    }


    private void Update()
    {
        invoiceService.Update(invoice);
        snackBar.Add("invoice Updated.", Severity.Success);
        GetAll();
        NavigationManager.NavigateTo($"/Invoices");
    }

    private void PageChanged(int i)
    {
        _table.NavigateTo(i - 1);
    }
}
