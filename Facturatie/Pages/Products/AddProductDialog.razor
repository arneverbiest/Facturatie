@using Facturatie.Shared
@using System
@using System.Linq
@using MudBlazor
@using static MudBlazor.CategoryTypes


@inject MudBlazor.ISnackbar snackBar
@inject IDialogService DialogService
@inject IJSRuntime JsRuntime






<MudCard Elevation="25">
    <MudCardContent>
        <EditForm OnValidSubmit="Add" OnInvalidSubmit='()=>snackBar.Add("Product added",Severity.Warning)' Model="@product">
            <MudSelect T="Guid" Label="Select client" @bind-Value="client.ClientId">
                @* <MudSelectItem T="Guid" Value="@invoice.InvoiceId">invoices</MudSelectItem> *@
                <MudSelectItem T="Guid" Value="@client.ClientId">clients</MudSelectItem>
                @foreach (var client in clients)
                {
                    <MudSelectItem T="Guid" Value="@client.ClientId">@client.ClientName</MudSelectItem>
                }
            </MudSelect>
            <MudTextField @bind-Value="@product.Name" Label="Name of the product"> </MudTextField>
            <MudTextField @bind-Value="@product.Description" Label="Description of the product"> </MudTextField>
            <MudNumericField @bind-Value="@product.Price" Label="Price of product"> </MudNumericField>
        </EditForm>
        <br />
        <MudButton Variant="Variant.Filled" Color="Color.Info" OnClick="AddProduct">Add Product</MudButton>
    </MudCardContent>
</MudCard>



@code {

    private Invoice invoice = new Invoice();
    private Client client = new Client();
    private Product product = new Product();
    private List<Invoice> invoices = new List<Invoice>();
    private List<Client> clients = new List<Client>();
    private List<Product> products = new List<Product>();


    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    void Close() => MudDialog.Close(DialogResult.Ok(true));


    protected override async Task OnInitializedAsync()
    {
        clients = clientService.GetAll();
        invoices = invoiceService.GetAll();
        products = productService.GetAll();
        product.ClientId = client.ClientId;
    }

    private List<Client> GetAll()
    {
        clients = clientService.GetAll();
        return clients;
    }


    private void Add()
    {
        if (client.ClientId == Guid.Empty)
        {
            clientService.Add(client);
        }
        else
        {
            clientService.Update(client);
        }
        invoice = new Invoice();
        snackBar.Add("product Added.", Severity.Success);
        GetAll();
        Close();
    }


    private void AddProduct()
    {
        // Associate the product with the current invoice
        product.ClientId = client.ClientId;

        // Add the product to the database using ProductService
        productService.Add(product);

        // Update the list of products
        products = productService.GetProductsByClientId(client.ClientId);

        snackBar.Add("Product Added.", Severity.Success);

        // Close the dialog
        MudDialog.Close(DialogResult.Ok(true));
    }

}
